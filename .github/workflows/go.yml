name: Go

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ master ]

jobs:

  build-controller:
    name: Build-Controller
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Install kubebuilder
        run: |
          os=$(go env GOOS)
          arch=$(go env GOARCH)

          mkdir -p /tmp/kubebuilder
          curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/kubebuilder

          sudo mv /tmp/kubebuilder/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
          export PATH=$PATH:/usr/local/kubebuilder/bin

      - name: Test
        run: cd controller && make test

      - name: Temporarily save coverage data
        uses: actions/upload-artifact@v2
        with:
          name: controller-coverage
          path: controller/cover.out
          retention-days: 1

  build-server:
    name: Build-Server
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Install protobuf
        run: sudo apt install protobuf-compiler

      - name: Build
        run: cd gopass-server && make build

      - name: Test
        run: cd gopass-server && make test

      - name: Test
        run: cd controller && make test

      - name: Temporarily save coverage data
        uses: actions/upload-artifact@v2
        with:
          name: gopass-server-coverage
          path: gopass-server/coverage.out
          retention-days: 1

  upload-coverage:
    name: Upload coverage data
    runs-on: ubuntu-latest
    needs: [build-controller, build-server]

    steps:
      - name: Retrieve coverage data of gopass-server
        uses: actions/download-artifact@v2
        with:
          name: gopass-server-coverage
          path: gopass-server

      - name: Retrieve coverage data of controller
        uses: actions/download-artifact@v2
        with:
          name: controller-coverage
          path: controller

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./gopass-server/coverage.out,./controller/covera.out
          flags: unittests # optional
          verbose: true
